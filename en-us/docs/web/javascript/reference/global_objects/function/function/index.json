{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Function() constructor","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Properties</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.arguments</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.displayName</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.length</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.name</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Methods</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toSource\"><code>Function.prototype.toSource()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Methods</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\"><code>Object.prototype.toSource()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>Function</code> constructor</strong> creates\n  a new <code>Function</code> <strong>object</strong>. Calling the constructor directly\n  can create functions dynamically, but suffers from security and similar (but far less\n  significant) performance issues to <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>Global_Objects/eval</code></a>. However, unlike eval, the\n  <code>Function</code> constructor creates functions which execute in the global scope\n  only.\n</p><iframe class=\"interactive\" height=\"410\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/function-constructor.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span>functionBody<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> functionBody<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> argN<span class=\"token punctuation\">,</span> functionBody<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"arg1_..._argn\"><code>arg1, ... argN</code></dt>\n  <dd>\n    <p>Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript parameter (any of plain <a href=\"/en-US/docs/Glossary/Identifier\">identifier</a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">rest parameter</a>, or <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">destructured</a> parameter, optionally with a default), or a list of such strings separated with commas.</p>\n    <p>As the parameters are parsed in the same way as function declarations, whitespace and comments are accepted. For example: <code>\"x\", \"theValue = 42\", \"[a, b] /* numbers */\"</code> — or <code>\"x, theValue = 42, [a, b] /* numbers */\"</code>. (<code>\"x, theValue = 42\", \"[a, b]\"</code> is also correct, though very confusing to read.)</p>\n  </dd>\n  <dt id=\"functionbody\"><code>functionBody</code></dt>\n  <dd>\n    <p>A string containing the JavaScript statements comprising the function definition.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p>\n  <code>Function</code> objects created with the <code>Function</code> constructor are\n  parsed when the function is created. This is less efficient than declaring a function\n  with a <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expression</a> or\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/function\">function statement</a> and calling it within\n  your code because such functions are parsed with the rest of the code.\n</p>\n<p>\n  All arguments passed to the function are treated as the names of the identifiers of the\n  parameters in the function to be created, in the order in which they are passed.\n  Omitting an argument will result in the value of that parameter being\n  <code>undefined</code>.\n</p>\n<p>\n  Invoking the <code>Function</code> constructor as a function (without using the\n  <code>new</code> operator) has the same effect as invoking it as a constructor.\n</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"specifying_arguments_with_the_function_constructor","title":"Specifying arguments with the Function constructor","isH3":true,"content":"<p>The following code creates a <code>Function</code> object that takes two arguments.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Example can be run directly in your JavaScript console</span>\n\n<span class=\"token comment\">// Create a function that takes two arguments, and returns the sum of those arguments</span>\n<span class=\"token keyword\">const</span> adder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'return a + b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Call the function</span>\n<span class=\"token function\">adder</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 8</span>\n</code></pre></div>\n<p>\n  The arguments \"<code>a</code>\" and \"<code>b</code>\" are formal argument names that are\n  used in the function body, \"<code>return a + b</code>\".\n</p>"}},{"type":"prose","value":{"id":"creating_a_function_object_from_a_function_declaration_or_function_expression","title":"Creating a function object from a function declaration or function expression","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// The function constructor can take in multiple statements separated by a semi-colon. Function expressions require a return statement with the function's name</span>\n\n<span class=\"token comment\">// Observe that new Function is called. This is so we can call the function we created directly afterwards</span>\n<span class=\"token keyword\">const</span> sumOfArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'const sumArray = (arr) =&gt; arr.reduce((previousValue, currentValue) =&gt; previousValue + currentValue); return sumArray'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// call the function</span>\n<span class=\"token function\">sumOfArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 10</span>\n\n<span class=\"token comment\">// If you don't call new Function at the point of creation, you can use the Function.call() method to call it</span>\n<span class=\"token keyword\">const</span> findLargestNumber <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function findLargestNumber (arr) { return Math.max(...arr) }; return findLargestNumber'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// call the function</span>\n<span class=\"token function\">findLargestNumber</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 8</span>\n\n<span class=\"token comment\">// Function declarations do not require a return statement</span>\n<span class=\"token keyword\">const</span> sayHello <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'return function (name) { return `Hello, ${name}` }'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// call the function</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Hello, world</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function-constructor","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Function.Function"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.Function.Function","dataURL":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions\">Functions and function scope</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/function\"><code>function</code></a> statement</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/function\"><code>function</code></a> expression</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/function*\"><code>function*</code></a> statement</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/function*\"><code>function*</code></a> expression</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\"><code>AsyncFunction</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\"><code>GeneratorFunction</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Description","id":"description"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The Function constructor creates\n  a new Function object. Calling the constructor directly\n  can create functions dynamically, but suffers from security and similar (but far less\n  significant) performance issues to Global_Objects/eval. However, unlike eval, the\n  Function constructor creates functions which execute in the global scope\n  only.","popularity":0.006,"modified":"2022-04-02T03:11:54.000Z","other_translations":[{"title":"Function() constructor","locale":"es","native":"Español"},{"title":"Function() コンストラクター","locale":"ja","native":"日本語"},{"title":"Конструктор Function()","locale":"ru","native":"Русский"}],"source":{"folder":"en-us/web/javascript/reference/global_objects/function/function","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/javascript/reference/global_objects/function/function/index.md","last_commit_url":"https://github.com/mdn/content/commit/e8532713e752f0249dbc71a79ac83c6c984d13d6","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"JavaScript reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function","title":"Function"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function","title":"Function() constructor"}],"pageTitle":"Function() constructor - JavaScript | MDN","noIndexing":false}}