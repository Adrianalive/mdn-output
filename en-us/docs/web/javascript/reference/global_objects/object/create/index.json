{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Object.create()","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Properties</strong></a><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Methods</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a></li><li><em><code>Object.create()</code></em></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\"><code>Object.freeze()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries\"><code>Object.fromEntries()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors\"><code>Object.getOwnPropertyDescriptors()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a></li><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"><code>Object.hasOwn()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\"><code>Object.isFrozen()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\"><code>Object.isSealed()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\"><code>Object.seal()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\"><code>Object.prototype.toSource()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"><code>Object.values()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>Object.create()</code></strong> method creates a new object, using an\n  existing object as the prototype of the newly created object.\n</p><iframe class=\"interactive\" height=\"692\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/object-create.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">,</span> propertiesObject<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"proto\"><code>proto</code></dt>\n  <dd>\n    <p>The object which should be the prototype of the newly-created object.</p>\n  </dd>\n  <dt id=\"propertiesobject\"><code>propertiesObject</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      If specified and not <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, an object whose enumerable own\n      properties (that is, those properties defined upon itself and <em>not</em> enumerable\n      properties along its prototype chain) specify property descriptors to be added to the\n      newly-created object, with the corresponding property names. These properties\n      correspond to the second argument of <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a>.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>A new object with the specified prototype object and properties.</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<p>The <code>proto</code> parameter has to be either</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a> or</li>\n  <li>an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> excluding <a href=\"/en-US/docs/Glossary/Primitive#primitive_wrapper_objects_in_javascript\">primitive wrapper objects</a>.</li>\n</ul>\n<p>If <code>proto</code> is neither of these a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> is thrown.</p>"}},{"type":"prose","value":{"id":"custom_and_null_objects","title":"Custom and Null objects","isH3":false,"content":"<p>\n  A new object created from a completely custom object (especially one created from the\n  <code>null</code> object, which is basically a custom object with NO members) can behave\n  in unexpected ways. This is especially true when debugging, since common object-property\n  converting/detecting utility functions may generate errors, or lose information\n  (especially if using silent error-traps that ignore errors). For example, here are two\n  objects:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>oco <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// create a normal object</span>\nocn <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// create a \"null\" object</span>\n\n<span class=\"token operator\">&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>oco<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {} -- Seems normal</span>\n<span class=\"token operator\">&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ocn<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {} -- Seems normal here too, so far</span>\n\noco<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// create a simple property on normal obj</span>\nocn<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// create a simple property on \"null\" obj</span>\n\n<span class=\"token operator\">&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>oco<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {p: 1} -- Still seems normal</span>\n<span class=\"token operator\">&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ocn<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {p: 0} -- Still seems normal here too. BUT WAIT...</span>\n</code></pre></div>\n<p>\n  As shown above, all seems normal so far. However, when attempting to actually use these\n  objects, their differences quickly become apparent:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&gt;</span> <span class=\"token string\">\"oco is: \"</span> <span class=\"token operator\">+</span> oco <span class=\"token comment\">// shows \"oco is: [object Object]\"</span>\n\n<span class=\"token operator\">&gt;</span> <span class=\"token string\">\"ocn is: \"</span> <span class=\"token operator\">+</span> ocn <span class=\"token comment\">// throws error: Cannot convert object to primitive value</span>\n</code></pre></div>\n<p>\n  Testing just a few of the many most basic built-in functions shows the magnitude of the\n  problem more clearly:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&gt;</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>oco<span class=\"token punctuation\">)</span> <span class=\"token comment\">// shows [object Object]</span>\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>ocn<span class=\"token punctuation\">)</span> <span class=\"token comment\">// throws error: Cannot convert object to primitive value</span>\n\n<span class=\"token operator\">&gt;</span> oco<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// shows [object Object]</span>\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// throws error: ocn.toString is not a function</span>\n\n<span class=\"token operator\">&gt;</span> oco<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// shows {}</span>\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// throws error: ocn.valueOf is not a function</span>\n\n<span class=\"token operator\">&gt;</span> oco<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// shows \"true\"</span>\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// throws error: ocn.hasOwnProperty is not a function</span>\n\n<span class=\"token operator\">&gt;</span> oco<span class=\"token punctuation\">.</span>constructor <span class=\"token comment\">// shows \"Object() { [native code] }\"</span>\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span>constructor <span class=\"token comment\">// shows \"undefined\"</span>\n</code></pre></div>\n<p>\n  As said, these differences can make debugging even simple-seeming problems quickly go\n  astray. For example:\n</p>\n<p><em>A simple common debugging function:</em></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// display top-level property name:value pairs of given object</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ShowProperties</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> prop <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prop <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><em>Not such simple results: (especially if silent error-trapping had hidden the error\nmessages)</em></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ob<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> ob<span class=\"token punctuation\">.</span>po<span class=\"token operator\">=</span>oco<span class=\"token punctuation\">;</span> ob<span class=\"token punctuation\">.</span>pn<span class=\"token operator\">=</span>ocn<span class=\"token punctuation\">;</span> <span class=\"token comment\">// create a compound object using the test objects from above as property values</span>\n\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">ShowProperties</span><span class=\"token punctuation\">(</span> ob <span class=\"token punctuation\">)</span> <span class=\"token comment\">// display top-level properties</span>\n<span class=\"token operator\">-</span> po<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object Object<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">-</span> Error<span class=\"token operator\">:</span> Cannot convert object to primitive value\n\nNote that only first property gets shown<span class=\"token punctuation\">.</span>\n</code></pre></div>\n<p><em>(But if the same object is created in a different order -- at least in some\nimplementations...)</em></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ob<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> ob<span class=\"token punctuation\">.</span>pn<span class=\"token operator\">=</span>ocn<span class=\"token punctuation\">;</span> ob<span class=\"token punctuation\">.</span>po<span class=\"token operator\">=</span>oco<span class=\"token punctuation\">;</span> <span class=\"token comment\">// create same compound object again, but create same properties in different order</span>\n\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">ShowProperties</span><span class=\"token punctuation\">(</span> ob <span class=\"token punctuation\">)</span> <span class=\"token comment\">// display top-level properties</span>\n<span class=\"token operator\">-</span> Error<span class=\"token operator\">:</span> Cannot convert object to primitive value\n\nNote that neither property gets shown<span class=\"token punctuation\">.</span>\n</code></pre></div>\n<p>\n  Note that such a different order may arise statically via disparate fixed codings such\n  as here, but also dynamically via whatever the order any such property-adding\n  code-branches actually get executed at runtime as depends on inputs and/or\n  random-variables. Then again, the actual iteration order is not guaranteed no matter\n  what the order members are added.\n</p>\n<p>\n  Be aware of, also, that using Object.entries() on an object created via Object.create()\n  will result in an empty array being returned.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// shows \"[]\"</span>\n</code></pre></div>\n<h4 id=\"some_non-solutions\">Some NON-solutions</h4>\n<p>A good solution for the missing object-methods is not immediately apparent.</p>\n<p>Adding the missing object-method directly from the standard-object does NOT work:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ocn <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// create \"null\" object (same as before)</span>\n\nocn<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// since new object lacks method then try assigning it directly from standard-object</span>\n\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span>toString <span class=\"token comment\">// shows \"toString() { [native code] }\" -- missing method seems to be there now</span>\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">==</span> Object<span class=\"token punctuation\">.</span>toString <span class=\"token comment\">// shows \"true\" -- method seems to be same as the standard object-method</span>\n\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// error: Function.prototype.toString requires that 'this' be a Function</span>\n</code></pre></div>\n<p>\n  Adding the missing object-method directly to new object's \"prototype\" does not work\n  either, since the new object does not have a real prototype (which is really the cause\n  of ALL these problems) and one cannot be <strong>directly</strong> added:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ocn <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// create \"null\" object (same as before)</span>\n\nocn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: Cannot set property 'toString' of undefined</span>\n\nocn<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// try to create a prototype</span>\nocn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// since new object lacks method then try assigning it from standard-object</span>\n\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// error: ocn.toString is not a function</span>\n</code></pre></div>\n<p>Adding the missing object-method by calling <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a> with the name of the standard-object itself as the second argument does not work either:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ocn <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// create \"null\" object (same as before)</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>ocn<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// wrong; sets new object's prototype to the Object() function</span>\n\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// error: Function.prototype.toString requires that 'this' be a Function</span>\n</code></pre></div>\n<h4 id=\"some_ok_solutions\">Some OK solutions</h4>\n<p>\n  Again, adding the missing object-method directly from the\n  <strong>standard-object</strong> does NOT work. However, adding the\n  <strong>generic</strong> method directly, DOES:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ocn <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// create \"null\" object (same as before)</span>\n\nocn<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> toString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// since new object lacks method then assign it directly from generic version</span>\n\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// shows \"[object Object]\"</span>\n<span class=\"token operator\">&gt;</span> <span class=\"token string\">\"ocn is: \"</span> <span class=\"token operator\">+</span> ocn <span class=\"token comment\">// shows \"ocn is: [object Object]\"</span>\n\nob<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> ob<span class=\"token punctuation\">.</span>pn<span class=\"token operator\">=</span>ocn<span class=\"token punctuation\">;</span> ob<span class=\"token punctuation\">.</span>po<span class=\"token operator\">=</span>oco<span class=\"token punctuation\">;</span> <span class=\"token comment\">// create a compound object (same as before)</span>\n\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">ShowProperties</span><span class=\"token punctuation\">(</span>ob<span class=\"token punctuation\">)</span> <span class=\"token comment\">// display top-level properties</span>\n<span class=\"token operator\">-</span> po<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object Object<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">-</span> pn<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object Object<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>\n  However, setting the generic <strong>prototype</strong> as the new object's prototype\n  works even better:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>ocn <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// create \"null\" object (same as before)</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>ocn<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// set new object's prototype to the \"generic\" object (NOT standard-object)</span>\n</code></pre></div>\n<p><em>(In addition to all the string-related functions shown above, this also adds:)</em></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// shows {}</span>\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// shows \"false\"</span>\n<span class=\"token operator\">&gt;</span> ocn<span class=\"token punctuation\">.</span>constructor <span class=\"token comment\">// shows \"Object() { [native code] }\"</span>\n\n<span class=\"token comment\">// ...and all the rest of the properties and methods of Object.prototype.</span>\n</code></pre></div>\n<p>As shown, objects modified this way now look very much like ordinary objects.</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"classical_inheritance_with_object.create","title":"Classical inheritance with <code>Object.create()</code>","isH3":true,"content":"<p>\n  Below is an example of how to use <code>Object.create()</code> to achieve classical\n  inheritance. This is for a single inheritance, which is all that JavaScript supports.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Shape - superclass</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// superclass method</span>\n<span class=\"token class-name\">Shape</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">move</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+=</span> y<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Shape moved.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Rectangle - subclass</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Shape</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// call super constructor.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// subclass extends superclass</span>\n<span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//If you don't set Rectangle.prototype.constructor to Rectangle,</span>\n<span class=\"token comment\">//it will take the prototype.constructor of Shape (parent).</span>\n<span class=\"token comment\">//To avoid that, we set the prototype.constructor to Rectangle (child).</span>\n<span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Rectangle<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> rect <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Is rect an instance of Rectangle?'</span><span class=\"token punctuation\">,</span> rect <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Is rect an instance of Shape?'</span><span class=\"token punctuation\">,</span> rect <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nrect<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Outputs, 'Shape moved.'</span>\n</code></pre></div>","titleAsText":"Classical inheritance with Object.create()"}},{"type":"prose","value":{"id":"using_propertiesobject_argument_with_object.create","title":"Using propertiesObject argument with Object.create()","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create an object with null as prototype</span>\no <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\no <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// is equivalent to:</span>\no <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Example where we create an object with a couple of</span>\n<span class=\"token comment\">// sample properties. (Note that the second parameter</span>\n<span class=\"token comment\">// maps keys to *property descriptors*.)</span>\no <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// foo is a regular 'value property'</span>\n  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// bar is a getter-and-setter (accessor) property</span>\n  <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Setting `o.bar` to'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* with ES2015 Accessors our code can look like this\n    get() { return 10; },\n    set(value) {\n      console.log('Setting `o.bar` to', value);\n    } */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\no <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// is equivalent to:</span>\no <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Of course, if there is actual initialization code</span>\n<span class=\"token comment\">// in the Constructor function,</span>\n<span class=\"token comment\">// the Object.create() cannot reflect it</span>\n\n<span class=\"token comment\">// Create a new object whose prototype is a new, empty</span>\n<span class=\"token comment\">// object and add a single property 'p', with value 42.</span>\no <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">p</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// by default properties ARE NOT writable,</span>\n<span class=\"token comment\">// enumerable or configurable:</span>\no<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\no<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 42</span>\n\no<span class=\"token punctuation\">.</span>q <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> prop <span class=\"token keyword\">in</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 'q'</span>\n\n<span class=\"token keyword\">delete</span> o<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// to specify an ES3 property</span>\no2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">p</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* is not equivalent to:\nThis will create an object with prototype : {p: 42 }\no2 = Object.create({p: 42}) */</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.create","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Object.create"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.Object.create","dataURL":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/zloirock/core-js#ecmascript-object\" class=\"external\" rel=\" noopener\">Polyfill of <code>Object.create</code> in <code>core-js</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct\"><code>Reflect.construct()</code></a></li>\n  <li>John Resig's post on <a href=\"http://ejohn.org/blog/objectgetprototypeof/\" class=\"external\" rel=\" noopener\">getPrototypeOf()</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Custom and Null objects","id":"custom_and_null_objects"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The Object.create() method creates a new object, using an\n  existing object as the prototype of the newly created object.","popularity":0.027,"modified":"2022-03-27T17:30:40.000Z","other_translations":[{"title":"Object.create()","locale":"de","native":"Deutsch"},{"title":"Object.create()","locale":"es","native":"Español"},{"title":"Object.create()","locale":"fr","native":"Français"},{"title":"Object.create()","locale":"ja","native":"日本語"},{"title":"Object.create()","locale":"ko","native":"한국어"},{"title":"Object.create()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Object.create()","locale":"ru","native":"Русский"},{"title":"Object.create()","locale":"zh-CN","native":"中文 (简体)"},{"title":"Object.create()","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"en-us/web/javascript/reference/global_objects/object/create","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/javascript/reference/global_objects/object/create/index.md","last_commit_url":"https://github.com/mdn/content/commit/edaa4aff4cf7532efdcba6014b9316aad2a5b6f1","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"JavaScript reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object","title":"Object"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create","title":"Object.create()"}],"pageTitle":"Object.create() - JavaScript | MDN","noIndexing":false}}