{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"PerformanceObserverEntryList.getEntries()","mdn_url":"/en-US/docs/Web/API/PerformanceObserverEntryList/getEntries","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Performance_Timeline\">Performance Timeline</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/PerformanceObserverEntryList\"><code>PerformanceObserverEntryList</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><em><code>getEntries()</code></em></li><li><a href=\"/en-US/docs/Web/API/PerformanceObserverEntryList/getEntriesByName\"><code>getEntriesByName()</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceObserverEntryList/getEntriesByType\"><code>getEntriesByType()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Performance Timeline API</summary><ol><li><a href=\"/en-US/docs/Web/API/Performance\"><code>Performance</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceEntry\"><code>PerformanceEntry</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceObserver\"><code>PerformanceObserver</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceResourceTiming\"><code>PerformanceResourceTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/performance_property\"><code>Window.performance</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>getEntries()</code></strong> method of the\n  <a href=\"/en-US/docs/Web/API/PerformanceObserverEntryList\"><code>PerformanceObserverEntryList</code></a> interface returns a list of explicitly\n  <em>observed</em> <a href=\"/en-US/docs/Web/API/PerformanceEntry\" title=\"performance entry\">performance entry</a>\n  objects for a given filter. The list's members are determined by the set of\n  <a href=\"/en-US/docs/Web/API/PerformanceEntry/entryType\" title=\"entry types\">entry types</a> specified in the\n  call to the <a href=\"/en-US/docs/Web/API/PerformanceObserver/observe\" title=\"observe()\"><code>observe()</code></a> method. The list is\n  available in the observer's callback function (as the first parameter in the callback).\n</p>\n<p>\n  This method is exposed to <a href=\"/en-US/docs/Web/API/Window\"><code>Window</code></a> and <a href=\"/en-US/docs/Web/API/Worker\"><code>Worker</code></a>\n  interfaces.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<p>General syntax:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>entries <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nentries <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span>PerformanceEntryFilterOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Specific usage:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>entries <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"entry_name\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">entryType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mark\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"performanceentryfilteroptions\"><code>PerformanceEntryFilterOptions</code><span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      Is a <code>PerformanceEntryFilterOptions</code> dictionary, having the following\n      fields:\n    </p>\n    <ul>\n      <li><code>\"name\"</code>, the name of a performance entry.</li>\n      <li>\n        <code>\"entryType\"</code>, the entry type. The valid entry types are listed in\n        the <a href=\"/en-US/docs/Web/API/PerformanceEntry/entryType\"><code>PerformanceEntry.entryType</code></a> method.\n      </li>\n      <li>\n        <code>\"initiatorType\"</code>, the type of the initiating resource (for example\n        an HTML element). The values are defined by the\n        <a href=\"/en-US/docs/Web/API/PerformanceResourceTiming/initiatorType\"><code>PerformanceResourceTiming.initiatorType</code></a> interface.\n      </li>\n    </ul>\n    <p>This parameter is currently not supported on Chrome or Opera.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>\n  A list of explicitly <em>observed</em> <a href=\"/en-US/docs/Web/API/PerformanceEntry\"><code>PerformanceEntry</code></a> objects that\n  meets the criteria of the filter. The items will be in chronological order based on the\n  entries' <a href=\"/en-US/docs/Web/API/PerformanceEntry/startTime\" title=\"startTime\"><code>startTime</code></a>. If no objects that meet\n  the filter are found, an empty list is returned. If no argument is given, all entries\n  are returned.\n</p>"}},{"type":"prose","value":{"id":"example","title":"Example","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">print_perf_entry</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pe</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name: \"</span>        <span class=\"token operator\">+</span> pe<span class=\"token punctuation\">.</span>name      <span class=\"token operator\">+</span>\n              <span class=\"token string\">\"; entryType: \"</span> <span class=\"token operator\">+</span> pe<span class=\"token punctuation\">.</span>entryType <span class=\"token operator\">+</span>\n              <span class=\"token string\">\"; startTime: \"</span> <span class=\"token operator\">+</span> pe<span class=\"token punctuation\">.</span>startTime <span class=\"token operator\">+</span>\n              <span class=\"token string\">\"; duration: \"</span>  <span class=\"token operator\">+</span> pe<span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Create observer for all performance event types</span>\n<span class=\"token keyword\">var</span> observe_all <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list<span class=\"token punctuation\">,</span> obs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> perfEntries<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Print all entries</span>\n  perfEntries <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> perfEntries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print_perf_entry</span><span class=\"token punctuation\">(</span>perfEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Print entries named \"Begin\" with type \"mark\"</span>\n  perfEntries <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Begin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> perfEntries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print_perf_entry</span><span class=\"token punctuation\">(</span>perfEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Print entries with type \"mark\"</span>\n  perfEntries <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> perfEntries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print_perf_entry</span><span class=\"token punctuation\">(</span>perfEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// subscribe to all performance event types</span>\nobserve_all<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">entryTypes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'frame'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mark'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'measure'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'navigation'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'resource'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'server'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> observe_frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list<span class=\"token punctuation\">,</span> obs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> perfEntries <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Should only have 'frame' entries</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> perfEntries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print_perf_entry</span><span class=\"token punctuation\">(</span>perfEntries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// subscribe to frame event only</span>\nobserve_frame<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">entryTypes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'frame'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/performance-timeline/#dom-performanceobserverentrylist-getentries","title":"Performance Timeline"}],"query":"api.PerformanceObserverEntryList.getEntries"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.PerformanceObserverEntryList.getEntries","dataURL":"/en-US/docs/Web/API/PerformanceObserverEntryList/getEntries/bcd.json"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Example","id":"example"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The getEntries() method of the\n  PerformanceObserverEntryList interface returns a list of explicitly\n  observed performance entry\n  objects for a given filter. The list's members are determined by the set of\n  entry types specified in the\n  call to the observe() method. The list is\n  available in the observer's callback function (as the first parameter in the callback).","popularity":0,"modified":"2021-09-14T18:08:09.000Z","other_translations":[{"title":"PerformanceObserverEntryList.getEntries()","locale":"fr","native":"Français"}],"source":{"folder":"en-us/web/api/performanceobserverentrylist/getentries","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/performanceobserverentrylist/getentries/index.md","last_commit_url":"https://github.com/mdn/content/commit/2279e5ae6c229c707a014a22aa1ec4635a0f981f","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/PerformanceObserverEntryList","title":"PerformanceObserverEntryList"},{"uri":"/en-US/docs/Web/API/PerformanceObserverEntryList/getEntries","title":"PerformanceObserverEntryList.getEntries()"}],"pageTitle":"PerformanceObserverEntryList.getEntries() - Web APIs | MDN","noIndexing":false}}