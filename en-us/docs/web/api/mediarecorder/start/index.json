{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MediaRecorder.start()","mdn_url":"/en-US/docs/Web/API/MediaRecorder/start","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/MediaRecorder\"><code>MediaRecorder()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond\"><code>audioBitsPerSecond</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/mimeType\"><code>mimeType</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/warning_event\"><code>onwarning</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/state\"><code>state</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stream\"><code>stream</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/isTypeSupported\"><code>isTypeSupported</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/pause\"><code>pause()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/requestData\"><code>requestData()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/resume\"><code>resume()</code></a></li><li><em><code>start()</code></em></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>stop()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\"><code>dataavailable</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/error_event\"><code>error</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/pause_event\"><code>pause</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/resume_event\"><code>resume</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/start_event\"><code>start</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stop_event\"><code>stop</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for MediaStream Recording</summary><ol><li><a href=\"/en-US/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <a href=\"/en-US/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a> method\n  <strong><code>start()</code></strong>, which is part of the MediaStream Recording API,\n  begins recording media into one or more <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a> objects.\n</p>\n<p>\n  You can\n  record the entire duration of the media into a single <code>Blob</code> (or until you\n  call <a href=\"/en-US/docs/Web/API/MediaRecorder/requestData\" title=\"requestData()\"><code>requestData()</code></a>), or you can specify the\n  number of milliseconds to record at a time. Then, each time that amount of media has\n  been recorded, an event will be delivered to let you act upon the recorded media, while\n  a new <code>Blob</code> is created to record the next slice of the media.\n</p>\n<p>\n  Assuming the <code>MediaRecorder</code>'s <a href=\"/en-US/docs/Web/API/MediaRecorder/state\" title=\"state\"><code>state</code></a>\n  is <code>inactive</code>, <code>start()</code> sets the <code>state</code> to\n  <code>recording</code>, then begins capturing media from the input stream. A\n  <code>Blob</code> is created and the data is collected in it until the time slice period\n  elapses or the source media ends. Each time a <code>Blob</code> is filled up to that\n  point (the timeslice duration or the end-of-media, if no slice duration was provided), a\n  <a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\" title=\"dataavailable\"><code>dataavailable</code></a> event is sent to the <code>MediaRecorder</code> with the\n  recorded data. If the source is still playing, a new <code>Blob</code> is created and\n  recording continues into that, and so forth.\n</p>\n<p>\n  When the source stream ends, <code>state</code> is set to <code>inactive</code> and\n  data gathering stops. A final <a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\" title=\"dataavailable\"><code>dataavailable</code></a> event is sent to the\n  <code>MediaRecorder</code>, followed by a <code><a href=\"/en-US/docs/Web/Events/stop\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">stop</a></code> event.\n</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>Note:</strong> If the browser is unable to start recording or continue\n    recording, it will raise a <a href=\"/en-US/docs/Web/API/DOMError\"><code>DOMError</code></a> event, followed by a\n    <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>MediaRecorder.dataavailable</code></a> event containing the <code>Blob</code> it\n    has gathered, followed by the <a href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>MediaRecorder.stop</code></a> event.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>timeslice<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"timeslice\"><code>timeslice</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      The number of milliseconds to record into each <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a>. If this\n      parameter isn't included, the entire media duration is recorded into a single\n      <code>Blob</code> unless the <a href=\"/en-US/docs/Web/API/MediaRecorder/requestData\" title=\"requestData()\"><code>requestData()</code></a>\n      method is called to obtain the <code>Blob</code> and trigger the creation of a new\n      <code>Blob</code> into which the media continues to be recorded.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p><code>undefined</code>.</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<p>\n  Errors that can be detected immediately are thrown as DOM exceptions. All other errors\n  are reported through <code><a href=\"/en-US/docs/Web/API/Element/error_event\" title=\"/en-US/docs/Web/Events/error\">error</a></code> events sent to the <code>MediaRecorder</code>\n  object. You can implement the <a href=\"/en-US/docs/Web/API/MediaRecorder/error_event\" title=\"onerror\"><code>onerror</code></a> event\n  handler to respond to these errors.\n</p>\n<dl>\n  <dt id=\"invalidmodificationerror\"><code>InvalidModificationError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if the number of tracks on the stream being recorded has changed. You cannot add or\n      remove tracks while recording media.\n    </p>\n  </dd>\n  <dt id=\"invalidstateerror\"><code>InvalidStateError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if the <code>MediaRecorder</code> is not in the <code>inactive</code> state; you cannot\n      start recording media if it is already being recorded. See the\n      <a href=\"/en-US/docs/Web/API/MediaRecorder/state\" title=\"state\"><code>state</code></a> property.\n    </p>\n  </dd>\n  <dt id=\"notsupportederror\"><code>NotSupportedError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if the media stream you are attempting to record is inactive, or one or more of the\n      stream's tracks is in a format that cannot be recorded using the current configuration.\n    </p>\n  </dd>\n  <dt id=\"securityerror\"><code>SecurityError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if the <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a> is configured to disallow recording. This may be the\n      case, for example, with sources obtained using <a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\" title=\"getUserMedia()\"><code>getUserMedia()</code></a> when the user denies permission to use an input device. This\n      exception may also be delivered as an <code><a href=\"/en-US/docs/Web/API/Element/error_event\" title=\"/en-US/docs/Web/Events/error\">error</a></code> event if\n      the security options for the source media change after recording begins.\n    </p>\n  </dd>\n  <dt id=\"unknownerror\"><code>UnknownError</code> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>Thrown if something else went wrong during the recording process.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"example","title":"Example","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">...</span>\n\n  record<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recorder started\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/mediacapture-record/#dom-mediarecorder-start","title":"MediaStream Recording"}],"query":"api.MediaRecorder.start"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaRecorder.start","dataURL":"/en-US/docs/Web/API/MediaRecorder/start/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Using the MediaRecorder API</a></li>\n  <li>\n    <a href=\"https://mdn.github.io/web-dictaphone/\" class=\"external\" rel=\" noopener\">Web Dictaphone</a>: MediaRecorder +\n    getUserMedia + Web Audio API visualization demo, by <a href=\"https://twitter.com/chrisdavidmills\" class=\"external\" rel=\" noopener\">Chris Mills</a> (<a href=\"https://github.com/mdn/web-dictaphone/\" class=\"external\" rel=\" noopener\">source on GitHub</a>.)\n  </li>\n  <li><a href=\"https://simpl.info/mediarecorder/\" class=\"external\" rel=\" noopener\">simpl.info MediaStream Recording demo</a>, by <a href=\"https://twitter.com/sw12\" class=\"external\" rel=\" noopener\">Sam Dutton</a>.</li>\n  <li><a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\" title=\"getUserMedia()\"><code>getUserMedia()</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Example","id":"example"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The MediaRecorder method\n  start(), which is part of the MediaStream Recording API,\n  begins recording media into one or more Blob objects.","popularity":0.0014,"modified":"2022-04-01T08:08:22.000Z","other_translations":[{"title":"MediaRecorder.start()","locale":"ja","native":"日本語"},{"title":"MediaRecorder.start()","locale":"ru","native":"Русский"}],"source":{"folder":"en-us/web/api/mediarecorder/start","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/api/mediarecorder/start/index.md","last_commit_url":"https://github.com/mdn/content/commit/ac7a7a70f78363ad8b1196e6a938a60bbb8952ff","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaRecorder","title":"MediaRecorder"},{"uri":"/en-US/docs/Web/API/MediaRecorder/start","title":"MediaRecorder.start()"}],"pageTitle":"MediaRecorder.start() - Web APIs | MDN","noIndexing":false}}