{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Advanced Example","mdn_url":"/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Advanced_Example","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":"advanced_example","title":"Advanced example","isH3":false,"content":"<p>This advanced example sorts several divs based on their content. The example allows sorting the content multiple times, alternating between ascending and descending order. The JavaScript loads the .xsl file only on the first sort and sets the <code>xslloaded</code> variable to true once it has finished loading the file. Using the <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.getParameter()</code></a> method, the code can figure whether to sort in ascending or descending order. It defaults to ascending if the parameter is empty (the first time the sorting happens, as there is no value for it in the XSLT file). The sorting value is set using <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>XSLTProcessor.setParameter()</code></a>.</p>\n<p>The XSLT file has a parameter called <code>myOrder</code> that JavaScript sets to change the sorting method. The <code>xsl:sort</code> element's order attribute can access the value of the parameter using <code>$myOrder</code>. However, the value needs to be an XPATH expression and not a string, so <code>{$myOrder}</code> is used. Using {} evaluates the content as an XPath expression.</p>\n<p>Once the transformation is complete, the result is appended to the document, as shown in this example.</p>\n<p><strong>Figure 7: Sorting based on div content: view example</strong></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// XHTML Fragment:</span>\n\n<span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"example\"</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token number\">3</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token number\">4</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token number\">5</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token number\">6</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token number\">7</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token number\">8</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token number\">9</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token number\">10</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n\n<span class=\"token comment\">// JavaScript</span>\n\n<span class=\"token keyword\">var</span> xslRef<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> xslloaded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> xsltProcessor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XSLTProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myDOM<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> xmlRef <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>xslloaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"example2.xsl\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    xslRef <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">;</span>\n    xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">importStylesheet</span><span class=\"token punctuation\">(</span>xslRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xslloaded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// create a new XML document in memory</span>\n  xmlRef <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// we want to move a part of the DOM from an HTML document to an XML document.</span>\n  <span class=\"token comment\">// importNode is used to clone the nodes we want to process via XSLT - true makes it do a deep clone</span>\n  <span class=\"token keyword\">var</span> myNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> clonedNode <span class=\"token operator\">=</span> xmlRef<span class=\"token punctuation\">.</span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>myNode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// after cloning, we append</span>\n  xmlRef<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>clonedNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// set the sorting parameter in the XSL file</span>\n  <span class=\"token keyword\">var</span> sortVal <span class=\"token operator\">=</span> xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myOrder\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sortVal <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">||</span> sortVal <span class=\"token operator\">==</span> <span class=\"token string\">\"descending\"</span><span class=\"token punctuation\">)</span>\n    xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myOrder\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ascending\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myOrder\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"descending\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// initiate the transformation</span>\n  <span class=\"token keyword\">var</span> fragment <span class=\"token operator\">=</span> xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">transformToFragment</span><span class=\"token punctuation\">(</span>xmlRef<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// clear the contents</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n  myDOM <span class=\"token operator\">=</span> fragment<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// add the new content from the transformation</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// XSL Stylesheet:</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>xsl<span class=\"token operator\">:</span>stylesheet version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/1999/xhtml\"</span> <span class=\"token literal-property property\">xmlns</span><span class=\"token operator\">:</span>html<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/1999/xhtml\"</span> <span class=\"token literal-property property\">xmlns</span><span class=\"token operator\">:</span>xsl<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/1999/XSL/Transform\"</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>xsl<span class=\"token operator\">:</span>output method<span class=\"token operator\">=</span><span class=\"token string\">\"html\"</span> indent<span class=\"token operator\">=</span><span class=\"token string\">\"yes\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n\n  <span class=\"token operator\">&lt;</span>xsl<span class=\"token operator\">:</span>param name<span class=\"token operator\">=</span><span class=\"token string\">\"myOrder\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n\n  <span class=\"token operator\">&lt;</span>xsl<span class=\"token operator\">:</span>template match<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">&gt;</span>\n\n    <span class=\"token operator\">&lt;</span>xsl<span class=\"token operator\">:</span>apply<span class=\"token operator\">-</span>templates select<span class=\"token operator\">=</span><span class=\"token string\">\"/div//div\"</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>xsl<span class=\"token operator\">:</span>sort select<span class=\"token operator\">=</span><span class=\"token string\">\".\"</span> data<span class=\"token operator\">-</span>type<span class=\"token operator\">=</span><span class=\"token string\">\"number\"</span> order<span class=\"token operator\">=</span><span class=\"token string\">\"{$myOrder}\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>xsl<span class=\"token operator\">:</span>apply<span class=\"token operator\">-</span>templates<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>xsl<span class=\"token operator\">:</span>template<span class=\"token operator\">&gt;</span>\n\n  <span class=\"token operator\">&lt;</span>xsl<span class=\"token operator\">:</span>template match<span class=\"token operator\">=</span><span class=\"token string\">\"div\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>xsl<span class=\"token operator\">:</span>copy<span class=\"token operator\">-</span><span class=\"token keyword\">of</span> select<span class=\"token operator\">=</span><span class=\"token string\">\".\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>xsl<span class=\"token operator\">:</span>template<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>xsl<span class=\"token operator\">:</span>stylesheet<span class=\"token operator\">&gt;</span>\n</code></pre></div>"}}],"toc":[{"text":"Advanced example","id":"advanced_example"}],"summary":"This advanced example sorts several divs based on their content. The example allows sorting the content multiple times, alternating between ascending and descending order. The JavaScript loads the .xsl file only on the first sort and sets the xslloaded variable to true once it has finished loading the file. Using the XSLTProcessor.getParameter() method, the code can figure whether to sort in ascending or descending order. It defaults to ascending if the parameter is empty (the first time the sorting happens, as there is no value for it in the XSLT file). The sorting value is set using XSLTProcessor.setParameter().","popularity":0,"modified":"2021-10-08T16:33:26.000Z","other_translations":[{"title":"Exemple avancé","locale":"fr","native":"Français"},{"title":"高度な例","locale":"ja","native":"日本語"},{"title":"Exemplo Avançado","locale":"pt-BR","native":"Português (do Brasil)"}],"source":{"folder":"en-us/web/xslt/xslt_js_interface_in_gecko/advanced_example","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/web/xslt/xslt_js_interface_in_gecko/advanced_example/index.md","last_commit_url":"https://github.com/mdn/content/commit/4476b8b6079d776acc13cc921c5d3dff3fbd2e2b","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Web","title":"Web technology for developers"},{"uri":"/en-US/docs/Web/XSLT","title":"XSLT: Extensible Stylesheet Language Transformations"},{"uri":"/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko","title":"The XSLT/JavaScript Interface in Gecko"},{"uri":"/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Advanced_Example","title":"Advanced Example"}],"pageTitle":"Advanced Example - XSLT: Extensible Stylesheet Language Transformations | MDN","noIndexing":false}}