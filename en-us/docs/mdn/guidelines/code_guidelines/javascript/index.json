{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"JavaScript guidelines","mdn_url":"/en-US/docs/MDN/Guidelines/Code_guidelines/JavaScript","locale":"en-US","native":"English (US)","sidebarHTML":"\n  <ol>\n    <li><a href=\"/en-US/docs/MDN/About\">About MDN</a></li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Contributing to MDN</summary>\n            <ol>\n                <li><a href=\"/en-US/docs/MDN/Contribute/Getting_started\">Get started on MDN</a></li>\n                <li><a href=\"/en-US/docs/MDN/Contribute\">Contributing to MDN</a></li>\n                <li><a href=\"/en-US/docs/MDN/Contribute/Howto\">Things you can do</a></li>\n                <li><a href=\"/en-US/docs/MDN/Contribute/Localize\">Localizing MDN</a></li>\n                <li><a href=\"/en-US/docs/MDN/Guidelines\">Guidelines</a></li>\n                <li><a href=\"/en-US/docs/MDN/Structures\">Content structures</a></li>\n             </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The following guidelines cover how to write JavaScript for MDN code examples.</p>\n<p>The following is a fairly simple set of JavaScript guidelines. We could go a lot deeper on this, but essentially we want to provide simple guidelines for writing concise examples that will be understandable by as many people as possible, rather than detailed guidelines for writing complex web apps. If you want something that goes into more detail, we'd recommend the <a href=\"https://github.com/airbnb/javascript\" class=\"external\" rel=\" noopener\">AirBnB JavaScript Style Guide</a>, which is generally compatible with our guidelines.</p>"}},{"type":"prose","value":{"id":"in_this_article","title":"In this article","isH3":false,"content":"<ul>\n  <li><a href=\"#general_javascript_guidelines\">General JavaScript guidelines</a>\n    <ul>\n      <li><a href=\"#use_expanded_syntax\">Use expanded syntax</a></li>\n      <li><a href=\"#javascript_comments\">JavaScript comments</a></li>\n      <li><a href=\"#use_modern_js_features\">Use modern JS features</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#variables\">Variables</a>\n    <ul>\n      <li><a href=\"#variable_naming\">Variable naming</a></li>\n      <li><a href=\"#declaring_variables\">Declaring variables</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#operators_and_comparison\">Operators and comparison</a>\n    <ul>\n      <li><a href=\"#ternary_operators\">Ternary operators</a></li>\n      <li><a href=\"#use_strict_equality\">Use strict equality</a></li>\n      <li><a href=\"#use_shortcuts_for_boolean_tests\">Use shortcuts for boolean tests</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#control_statements\">Control statements</a></li>\n  <li><a href=\"#strings\">Strings</a>\n    <ul>\n      <li><a href=\"#use_template_literals\">Use template literals</a></li>\n      <li><a href=\"#use_textcontent_not_innerhtml\">Use textContent, not innerHTML</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#conditionals\">Conditionals</a>\n    <ul>\n      <li><a href=\"#general_purpose_looping\">General purpose looping</a></li>\n      <li><a href=\"#switch_statements\">Switch statements</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#functions_and_objects\">Functions and objects</a>\n    <ul>\n      <li><a href=\"#function_naming\">Function naming</a></li>\n      <li><a href=\"#defining_functions\">Defining functions</a></li>\n      <li><a href=\"#creating_objects\">Creating objects</a></li>\n      <li><a href=\"#object_classes\">Object classes</a></li>\n      <li><a href=\"#object_naming\">Object naming</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#arrays\">Arrays</a>\n    <ul>\n      <li><a href=\"#creating_arrays\">Creating arrays</a></li>\n      <li><a href=\"#adding_to_an_array\">Adding to an array</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#error_handling\">Error handling</a></li>\n</ul>"}},{"type":"prose","value":{"id":"general_javascript_guidelines","title":"General JavaScript guidelines","isH3":false,"content":""}},{"type":"prose","value":{"id":"use_expanded_syntax","title":"Use expanded syntax","isH3":true,"content":"<p>For JavaScript we use expanded syntax, with each line of JS on a new line, the opening brace of a block on the same line as its associated statement, and the closing brace on a new line. This maximizes readability, and again, promotes consistency on MDN.</p>\n<p>Do this</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Not this</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>We also have a few specific rules around spacing inside language features. You should include spaces between operators and operands, parameters, etc.</p>\n<p>This is more readable</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dayOfWeek <span class=\"token operator\">===</span> <span class=\"token number\">7</span> <span class=\"token operator\">&amp;&amp;</span> weather <span class=\"token operator\">===</span> <span class=\"token string\">'sunny'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">goOnTrip</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beach'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'car'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ice cream'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bucket and spade'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'beach towel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>than this</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dayOfWeek<span class=\"token operator\">===</span><span class=\"token number\">7</span><span class=\"token operator\">&amp;&amp;</span>weather<span class=\"token operator\">===</span><span class=\"token string\">'sunny'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">goOnTrip</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beach'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'car'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ice cream'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bucket and spade'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'beach towel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>In addition, keep these specifics in mind:</p>\n<ul>\n  <li>Don't include padding spaces after opening brackets or before closing brackets â€” <code>(myVar)</code>, not <code>( myVar )</code>.</li>\n  <li>All statements must end with semicolons (\";\"). We require them in all of our code samples even though they're technically optional in JavaScript because we feel that it leads to code that is clearer and more precise about where each statement ends.</li>\n  <li>Use single quotes in JavaScript, wherever single quotes are needed in syntax.</li>\n  <li>There should be no space between a control statement keyword, function, or loop keyword and its opening parenthesis (e.g. <code>if() { ... }</code>, <code>function myFunc() { ... }, for(...) { ... }</code>).</li>\n  <li>There should be a space between the parentheses and the opening curly brace in such cases as described in the previous bullet.</li>\n</ul>"}},{"type":"prose","value":{"id":"javascript_comments","title":"JavaScript comments","isH3":true,"content":"<p>Use JS-style comments to comment code that isn't self-documenting:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token comment\">// This is a JavaScript-style comment</span>\n</code></pre></div>\n<p>Put your comments on separate lines preceding the code they are referring to:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Output the string 'Hello' to the browser's JS console</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Create a new paragraph, fill it with content, and append it to the &lt;body&gt;</span>\n  <span class=\"token keyword\">let</span> para <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  para<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'My new paragraph'</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>para<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Also note that you should leave a space between the slashes and the comment, in each case.</p>"}},{"type":"prose","value":{"id":"use_modern_js_features","title":"Use modern JS features","isH3":true,"content":"<p>For general usage, you can use modern well-supported JS features (such as <a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow functions</a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">promises</a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"><code>async</code></a>/<a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/await\"><code>await</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a>/<a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Template_literals\">template literals</a>, and <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a>) in MDN examples. We include them in many places in these guidelines, as we believe the web industry has generally gotten to the point where such features are familiar enough to be understandable. And for those that don't use them yet, we'd like to play our part in helping people to evolve their skills.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> By \"general usage\", we mean general example writing. Reference pages covering specific JS features obviously need to use the features they are documenting!</p>\n</div>"}},{"type":"prose","value":{"id":"variables","title":"Variables","isH3":false,"content":""}},{"type":"prose","value":{"id":"variable_naming","title":"Variable naming","isH3":true,"content":"<p>For variable names use lowerCamelCasing, and use concise, human-readable, semantic names where appropriate.</p>\n<p>Do this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> playerScore <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> speed <span class=\"token operator\">=</span> distance <span class=\"token operator\">/</span> time<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Not this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> thisIsaveryLONGVariableThatRecordsPlayerscore345654 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> d<span class=\"token operator\">/</span>t<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> The only place where it is OK to not use human-readable semantic names is where a very common recognized convention exists, such as using <code>i</code>, <code>j</code>, etc. for loop iterators.</p>\n</div>"}},{"type":"prose","value":{"id":"declaring_variables","title":"Declaring variables","isH3":true,"content":"<p>When declaring variables and constants, use the <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a> keywords, not <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a>.</p>\n<p>If a variable will not be reassigned, prefer <code>const</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Otherwise, use <code>let</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> myAge <span class=\"token operator\">=</span> <span class=\"token string\">'40'</span><span class=\"token punctuation\">;</span>\nmyAge<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Happy birthday!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This example uses <code>let</code> where it should prefer <code>const</code>. It will work but should be avoided in MDN code examples:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This example uses const for a variable that gets reassigned. The reassignment will throw an error:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> myAge <span class=\"token operator\">=</span> <span class=\"token string\">'40'</span><span class=\"token punctuation\">;</span>\nmyAge<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Happy birthday!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This example uses <code>var</code>, which should be avoided in MDN code examples unless it is really needed:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">var</span> myAge <span class=\"token operator\">=</span> <span class=\"token string\">'40'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"operators_and_comparison","title":"Operators and comparison","isH3":false,"content":""}},{"type":"prose","value":{"id":"ternary_operators","title":"Ternary operators","isH3":true,"content":"<p>Ternary operators should be put on a single line:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&gt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'adult'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'minor'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Not nested:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&gt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">?</span> <span class=\"token string\">'adult'</span>\n  <span class=\"token operator\">:</span> <span class=\"token string\">'minor'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This is much harder to read.</p>"}},{"type":"prose","value":{"id":"use_strict_equality","title":"Use strict equality","isH3":true,"content":"<p>Always use strict equality and inequality.</p>\n<p>Do this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code>name <span class=\"token operator\">===</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\nage <span class=\"token operator\">!==</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Not this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>name <span class=\"token operator\">==</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\nage <span class=\"token operator\">!=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"use_shortcuts_for_boolean_tests","title":"Use shortcuts for boolean tests","isH3":true,"content":"<p>Use shortcuts for boolean tests â€” use <code>x</code> and <code>!x</code>, not <code>x === true</code> and <code>x === false</code>.</p>"}},{"type":"prose","value":{"id":"control_statements","title":"Control statements","isH3":false,"content":"<p>Write control statements like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>iceCream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Woo hoo!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Not this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iceCream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Woo hoo!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Also bear in mind:</p>\n<ul>\n  <li>There should be <em>no space</em> between a control statement keyword and its opening parenthesis.</li>\n  <li>There should be <em>a space</em> between the parentheses and the opening curly brace.</li>\n</ul>"}},{"type":"prose","value":{"id":"strings","title":"Strings","isH3":false,"content":""}},{"type":"prose","value":{"id":"use_template_literals","title":"Use template literals","isH3":true,"content":"<p>For inserting values into strings, use string literals.</p>\n<p>Do this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi! I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>myName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Not this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi! I\\'m'</span> <span class=\"token operator\">+</span> myName <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"use_textcontent_not_innerhtml","title":"Use textContent, not innerHTML","isH3":true,"content":"<p>When inserting strings into DOM nodes, use <a href=\"/en-US/docs/Web/API/Node/textContent\"><code>Node.textContent</code></a>:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'Hello to all you good people'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> para <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npara<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Not <a href=\"/en-US/docs/Web/API/Element/innerHTML\"><code>Element.innerHTML</code></a>:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'Hello to all you good people'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> para <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npara<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>textContent</code> is a lot more efficient, and less error-prone than <code>innerHTML</code>.</p>"}},{"type":"prose","value":{"id":"conditionals","title":"Conditionals","isH3":false,"content":""}},{"type":"prose","value":{"id":"general_purpose_looping","title":"General purpose looping","isH3":true,"content":"<p>When <a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code\">loops</a> are required, feel free to choose an appropriate loop out of the available ones (<a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for\"><code>for</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/while\"><code>while</code></a>, etc.) Just make sure to keep the code as understandable as possible.</p>\n<p>When using <code>for</code>/<code>for...of</code> loops, make sure to define the initializer properly, with a <code>let</code> keyword:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> cats <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Athena'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Luna'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> cats<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Not</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> cats <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Athena'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Luna'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">of</span> cats<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Also bear in mind:</p>\n<ul>\n  <li>There should be <em>no space</em> between a loop keyword and its opening parenthesis.</li>\n  <li>There should be <em>a space</em> between the parentheses and the opening curly brace.</li>\n</ul>"}},{"type":"prose","value":{"id":"switch_statements","title":"Switch statements","isH3":true,"content":"<p>Format switch statements like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> expr <span class=\"token operator\">=</span> <span class=\"token string\">'Papayas'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Oranges'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oranges are $0.59 a pound.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'Papayas'</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mangoes and papayas are $2.79 a pound.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// expected output: \"Mangoes and papayas are $2.79 a pound.\"</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Sorry, we are out of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>expr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"functions_and_objects","title":"Functions and objects","isH3":false,"content":""}},{"type":"prose","value":{"id":"function_naming","title":"Function naming","isH3":true,"content":"<p>For function names use lowerCamelCasing, and use concise, human-readable, semantic names where appropriate.</p>\n<p>Do this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Not these:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">notVeryObviousName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"defining_functions","title":"Defining functions","isH3":true,"content":"<p>Where possible, use the <code>function</code> declaration to define functions over function expressions:</p>\n<p>Do this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Not this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>When using anonymous functions inside a method that requires a function as a parameter, it is acceptable (although not required) to use an arrow function to make the code shorter and cleaner.</p>\n<p>So instead of this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> array1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> array1<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>you could write this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> array1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> array1<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Also bear in mind:</p>\n<ul>\n  <li>There should be <em>no space</em> between a function name and its opening parenthesis.</li>\n  <li>There should be <em>a space</em> between the parentheses and the opening curly brace.</li>\n</ul>"}},{"type":"prose","value":{"id":"creating_objects","title":"Creating objects","isH3":true,"content":"<p>Use literals â€” not constructors â€” for creating general objects (i.e., when classes are not involved):</p>\n<p>Do this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Not this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> myObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"object_classes","title":"Object classes","isH3":true,"content":"<p>Use ES class syntax for objects, not old-style constructors.</p>\n<p>For example:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi! I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Use <code>extends</code> for inheritance:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"object_naming","title":"Object naming","isH3":true,"content":"<p>When defining an object class (as seen above), use UpperCamelCasing (also known as PascalCasing) for the class name, and lowerCamelCasing for the object property and method names.</p>\n<p>When defining an object instance, either a literal or via a constructor, use lowerCamelCase for the instance name:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> hanSolo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Han Solo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> hanSolo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Han Solo'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"arrays","title":"Arrays","isH3":false,"content":""}},{"type":"prose","value":{"id":"creating_arrays","title":"Creating arrays","isH3":true,"content":"<p>Use literals â€” not constructors â€” for creating arrays:</p>\n<p>Do this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">let</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Not this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">let</span> myArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"adding_to_an_array","title":"Adding to an array","isH3":true,"content":"<p>When adding items to an array, use <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>push()</code></a>, not direct assignment. Given the following array:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> pets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>do this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code>pets<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>not this:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>pets<span class=\"token punctuation\">[</span>pets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'cat'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"error_handling","title":"Error handling","isH3":false,"content":"<p>If certain states of your program throw uncaught errors, they will halt execution and potentially reduce the usefulness of the example. You should therefore catch errors using a <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try...catch</code></a> block:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"good_javascript_examples_on_mdn","title":"Good JavaScript examples on MDN","isH3":false,"content":"<p>You can find good, concise, meaningful JavaScript snippets at the top of our <a href=\"/en-US/docs/Web/JavaScript/Reference\">JavaScript language reference</a> pages â€” browse through it to find some.</p>\n<p>Our interactive (and other) examples are generally written to follow the above guidelines, although be aware that they may differ in some places as they were mostly written before the guidelines were newly written.</p>\n<p>For API examples, we'd like to highlight a few examples we think are good:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/API/fetch#examples\"><code>fetch()</code> examples</a></li>\n  <li><a href=\"/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect#examples\"><code>fillRect()</code> examples</a> (the Canvas 2D examples are generally good, although they still use old-style <code>var</code>).</li>\n  <li><a href=\"/en-US/docs/Web/API/PaymentRequest/show\">Payment Request API <code>show()</code></a> (The <a href=\"/en-US/docs/Web/API/PaymentRequest\"><code>PaymentRequest</code></a> examples are generally quite good).</li>\n  <li><a href=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Using the Web Audio API</a> (general good practices for HTML, CSS, and JavaScript, and a good demonstration of how to use snippets and link to full examples elsewhere).</li>\n  <li><a href=\"/en-US/docs/Web/API/Media_Capabilities_API/Using_the_Media_Capabilities_API\">Using the Media Capabilities API</a> (more general good practices for using code snippets in a guide).</li>\n</ul>"}}],"toc":[{"text":"In this article","id":"in_this_article"},{"text":"General JavaScript guidelines","id":"general_javascript_guidelines"},{"text":"Variables","id":"variables"},{"text":"Operators and comparison","id":"operators_and_comparison"},{"text":"Control statements","id":"control_statements"},{"text":"Strings","id":"strings"},{"text":"Conditionals","id":"conditionals"},{"text":"Functions and objects","id":"functions_and_objects"},{"text":"Arrays","id":"arrays"},{"text":"Error handling","id":"error_handling"},{"text":"Good JavaScript examples on MDN","id":"good_javascript_examples_on_mdn"}],"summary":"The following guidelines cover how to write JavaScript for MDN code examples.","popularity":0.0028,"modified":"2021-10-15T15:32:38.000Z","other_translations":[{"title":"Lignes directrices pour JavaScript","locale":"fr","native":"FranÃ§ais"}],"source":{"folder":"en-us/mdn/guidelines/code_guidelines/javascript","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/mdn/guidelines/code_guidelines/javascript/index.md","last_commit_url":"https://github.com/mdn/content/commit/32f6335487194aa8c3a9fb5c90eeba5e95be6224","filename":"index.md"},"parents":[{"uri":"/en-US/docs/MDN","title":"The MDN project"},{"uri":"/en-US/docs/MDN/Guidelines","title":"Guidelines"},{"uri":"/en-US/docs/MDN/Guidelines/Code_guidelines","title":"Code example guidelines"},{"uri":"/en-US/docs/MDN/Guidelines/Code_guidelines/JavaScript","title":"JavaScript guidelines"}],"pageTitle":"JavaScript guidelines - The MDN project | MDN","noIndexing":false}}