{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Primitive","mdn_url":"/en-US/docs/Glossary/Primitive","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>In <a href=\"/en-US/docs/Glossary/JavaScript\">JavaScript</a>, a <strong>primitive</strong> (primitive value, primitive data type) is data that is not an <a href=\"/en-US/docs/Glossary/Object\">object</a> and has no <a href=\"/en-US/docs/Glossary/Method\">methods</a>. There are 7 primitive data types: <a href=\"/en-US/docs/Glossary/String\">string</a>, <a href=\"/en-US/docs/Glossary/Number\">number</a>, <a href=\"/en-US/docs/Glossary/BigInt\">bigint</a>, <a href=\"/en-US/docs/Glossary/Boolean\">boolean</a>, <a href=\"/en-US/docs/Glossary/undefined\">undefined</a>, <a href=\"/en-US/docs/Glossary/Symbol\">symbol</a>, and <a href=\"/en-US/docs/Glossary/Null\">null</a>.</p>\n<p>Most of the time, a primitive value is represented directly at the lowest level of the language implementation.</p>\n<p>All primitives are <strong>immutable</strong>, i.e., they cannot be altered. It is important not to confuse a primitive itself with a variable assigned a primitive value. The variable may be reassigned a new value, but the existing value can not be changed in the ways that objects, arrays, and functions can be altered.</p>"}},{"type":"prose","value":{"id":"example","title":"Example","isH3":false,"content":"<p>This example will help you understand that primitive values are <strong>immutable.</strong></p>"}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Using a string method doesn't mutate the string</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// baz</span>\nbar<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// baz</span>\n\n<span class=\"token comment\">// Using an array method mutates the array</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// []</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plugh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// [\"plugh\"]</span>\n\n<span class=\"token comment\">// Assignment gives the primitive a new (not a mutated) value</span>\nbar <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// BAZ</span>\n</code></pre></div>\n<p>A primitive can be replaced, but it can't be directly altered.</p>"}},{"type":"prose","value":{"id":"primitive_wrapper_objects_in_javascript","title":"Primitive wrapper objects in JavaScript","isH3":false,"content":"<p>Except for <code>null</code> and <code>undefined</code>, all primitive values have object equivalents that wrap around the primitive values:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> for the string primitive.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> for the number primitive.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> for the bigint primitive.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> for the boolean primitive.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> for the symbol primitive.</li>\n</ul>\n<p>The wrapper's <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>valueOf()</code></a> method returns the primitive value.</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Data_structures\">JavaScript data types</a></li>\n  <li><a title=\"Primitive data type\" href=\"https://en.wikipedia.org/wiki/Primitive_data_type\" class=\"external\" rel=\" noopener\">Primitive data type</a> (Wikipedia)</li>\n  <li><a href=\"/en-US/docs/Glossary\">Glossary</a>\n    <ul>\n      <li><a href=\"/en-US/docs/Glossary/JavaScript\">JavaScript</a></li>\n      <li><a href=\"/en-US/docs/Glossary/String\">string</a></li>\n      <li><a href=\"/en-US/docs/Glossary/Number\">number</a></li>\n      <li><a href=\"/en-US/docs/Glossary/BigInt\">bigint</a></li>\n      <li><a href=\"/en-US/docs/Glossary/Boolean\">boolean</a></li>\n      <li><a href=\"/en-US/docs/Glossary/Null\">null</a></li>\n      <li><a href=\"/en-US/docs/Glossary/undefined\">undefined</a></li>\n      <li><a href=\"/en-US/docs/Glossary/Symbol\">symbol</a></li>\n    </ul>\n  </li>\n</ul>"}}],"toc":[{"text":"Example","id":"example"},{"text":"Primitive wrapper objects in JavaScript","id":"primitive_wrapper_objects_in_javascript"},{"text":"See also","id":"see_also"}],"summary":"In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods. There are 7 primitive data types: string, number, bigint, boolean, undefined, symbol, and null.","popularity":0.0138,"modified":"2022-02-18T09:06:52.000Z","other_translations":[{"title":"Skalare Daten","locale":"de","native":"Deutsch"},{"title":"Primitivo","locale":"es","native":"Español"},{"title":"Primitive","locale":"fr","native":"Français"},{"title":"Primitive (プリミティブ)","locale":"ja","native":"日本語"},{"title":"원시 값","locale":"ko","native":"한국어"},{"title":"Primitivo","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Primitive","locale":"ru","native":"Русский"},{"title":"原始数据","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/glossary/primitive","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/glossary/primitive/index.md","last_commit_url":"https://github.com/mdn/content/commit/d2a9f2e26a8139d4bb270d7dc3cddd8b848719fe","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Glossary","title":"MDN Web Docs Glossary: Definitions of Web-related terms"},{"uri":"/en-US/docs/Glossary/Primitive","title":"Primitive"}],"pageTitle":"Primitive - MDN Web Docs Glossary: Definitions of Web-related terms | MDN","noIndexing":false}}