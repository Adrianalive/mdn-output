{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Scope","mdn_url":"/en-US/docs/Glossary/Scope","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The current context of execution. The context in which <a href=\"/en-US/docs/Glossary/Value\">values</a> and <strong>expressions</strong> are \"visible\" or can be referenced. If a <strong><a href=\"/en-US/docs/Glossary/Variable\">variable</a></strong> or other expression is not \"in the current scope,\" then it is unavailable for use. Scopes can also be layered in a hierarchy, so that child scopes have access to parent scopes, but not vice versa.</p>\n<p>A <strong><a href=\"/en-US/docs/Glossary/Function\">function</a></strong> serves as a <strong>closure</strong> in <a href=\"/en-US/docs/Glossary/JavaScript\">JavaScript</a>, and thus creates a scope, so that (for example) a variable defined exclusively within the function cannot be accessed from outside the function or within other functions. For instance, the following is invalid:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">exampleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"declared inside function\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// x can only be used in exampleFunction</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Causes error</span>\n</code></pre></div>\n<p>However, the following code is valid due to the variable being declared outside the function, making it global:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"declared outside function\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">exampleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">exampleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Outside function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a title=\"Scope (computer science)\" href=\"https://en.wikipedia.org/wiki/Scope_(computer_science)\" class=\"external\" rel=\" noopener\">Scope (computer science)</a> on Wikipedia</li>\n</ul>"}}],"toc":[{"text":"See also","id":"see_also"}],"summary":"The current context of execution. The context in which values and expressions are \"visible\" or can be referenced. If a variable or other expression is not \"in the current scope,\" then it is unavailable for use. Scopes can also be layered in a hierarchy, so that child scopes have access to parent scopes, but not vice versa.","popularity":0.0041,"modified":"2022-02-18T09:06:52.000Z","other_translations":[{"title":"Scope","locale":"de","native":"Deutsch"},{"title":"Scope","locale":"es","native":"Español"},{"title":"Portée","locale":"fr","native":"Français"},{"title":"Scope (スコープ)","locale":"ja","native":"日本語"},{"title":"스코프","locale":"ko","native":"한국어"},{"title":"Escopo","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Scope（作用域）","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/glossary/scope","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/glossary/scope/index.md","last_commit_url":"https://github.com/mdn/content/commit/d2a9f2e26a8139d4bb270d7dc3cddd8b848719fe","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Glossary","title":"MDN Web Docs Glossary: Definitions of Web-related terms"},{"uri":"/en-US/docs/Glossary/Scope","title":"Scope"}],"pageTitle":"Scope - MDN Web Docs Glossary: Definitions of Web-related terms | MDN","noIndexing":false}}