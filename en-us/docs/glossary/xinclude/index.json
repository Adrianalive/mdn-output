{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"XInclude","mdn_url":"/en-US/docs/Glossary/XInclude","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"https://www.w3.org/TR/xinclude/#text-included-items\" class=\"external\" rel=\" noopener\">XML Inclusions (XInclude)</a> is a W3C Recommendation to allow inclusion of XML more different sources in a more convenient fashion than XML external entities. When used in conjunction with XPointer (Firefox supports a subset of it, and is used in the code sample below), XInclude can also target just specific portions of a document for inclusion. Firefox does not support it natively, but the following function aims to allow its use with documents passed into it.</p>"}},{"type":"prose","value":{"id":"code_sample","title":"Code sample","isH3":true,"content":"<p>The following code aims to let &lt;xi:include&gt; and &lt;xi:fallback&gt; tags (the two elements in the language) with all of the attributes of &lt;xi:include&gt; be included in an XML document so as to be resolvable into a single XML document.</p>\n<p>(Note that this has not been thoroughly tested for all circumstances and may not necessarily reflect the standard behavior completely.)</p>\n<p>Note also that if you wish to allow xml:base, you will need the <a href=\"/en-US/docs/Archive/Add-ons/Code_snippets/XML/base_function\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">xml:base function</a>, and the line beginning <code>var href = ...</code> should become:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> href <span class=\"token operator\">=</span> <span class=\"token function\">getXmlBaseLink</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* XLink sans xml:base */</span> xinclude<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Element to query from */</span> xinclude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">resolveXIncludes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">docu</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// http://www.w3.org/TR/xinclude/#xml-included-items</span>\n    <span class=\"token keyword\">var</span> xincludes <span class=\"token operator\">=</span> docu<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagNameNS</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.w3.org/2001/XInclude'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'include'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xincludes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> xincludes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> xinclude <span class=\"token operator\">=</span> xincludes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> href <span class=\"token operator\">=</span> xinclude<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> parse <span class=\"token operator\">=</span> xinclude<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parse'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> xpointer <span class=\"token operator\">=</span> xinclude<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xpointer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> encoding <span class=\"token operator\">=</span> xinclude<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'encoding'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// e.g., UTF-8 // \"text/xml or application/xml or matches text/*+xml or application/*+xml\" before encoding (then UTF-8)</span>\n            <span class=\"token keyword\">var</span> accept <span class=\"token operator\">=</span> xinclude<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'accept'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// header \"Accept: \"+x</span>\n            <span class=\"token keyword\">var</span> acceptLanguage <span class=\"token operator\">=</span> xinclude<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'accept-language'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Accept-Language: \"+x</span>\n            <span class=\"token keyword\">var</span> xiFallback <span class=\"token operator\">=</span> xinclude<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagNameNS</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.w3.org/2001/XInclude'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fallback'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Only one such child is allowed</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>href <span class=\"token operator\">===</span> <span class=\"token string\">''</span> <span class=\"token operator\">||</span> href <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Points to same document if empty (null is equivalent to empty string)</span>\n                href <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set for uniformity in testing below</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parse <span class=\"token operator\">===</span> <span class=\"token string\">'xml'</span> <span class=\"token operator\">&amp;&amp;</span> xpointer <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There must be an XPointer attribute present if \"href\" is empty an parse is \"xml\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>href<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">#$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> href<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^#</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fragment identifiers are disallowed in an XInclude \"href\" attribute'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">var</span> j<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> xincludeParent <span class=\"token operator\">=</span> xinclude<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                netscape<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>PrivilegeManager<span class=\"token punctuation\">.</span><span class=\"token function\">enablePrivilege</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UniversalXPConnect UniversalBrowserRead'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Necessary with file:///-located files trying to reach external sites</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>href <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">var</span> response<span class=\"token punctuation\">,</span> responseType<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    request<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> href<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    request<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'If-Modified-Since'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Thu, 1 Jan 1970 00:00:00 GMT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    request<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'no-cache'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>accept<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        request<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Accept'</span><span class=\"token punctuation\">,</span> accept<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>acceptLanguage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        request<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Accept-Language'</span><span class=\"token punctuation\">,</span> acceptLanguage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>parse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">case</span> <span class=\"token string\">'text'</span><span class=\"token operator\">:</span>\n                            <span class=\"token comment\">// Priority should be on media type:</span>\n\n                            <span class=\"token keyword\">var</span> contentType <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getResponseHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                            <span class=\"token comment\">//text/xml; charset=\"utf-8\" // Send to get headers first?</span>\n                            <span class=\"token comment\">// Fix: We test for file extensions as well in case file:// doesn't return content type (as seems to be the case); can some other tool be used in FF (or IE) to detect encoding of local file? Probably just need BOM test since other encodings must be specified</span>\n                            <span class=\"token keyword\">var</span> patternXML <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(svg|xml|xul|rdf|xhtml)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>contentType <span class=\"token operator\">&amp;&amp;</span> contentType<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[text|application]\\/(.*)\\+?xml</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>href<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file://'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> href<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>patternXML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token comment\">/* Grab the response as text (see below for that routine) and then find encoding within*/</span>\n                               <span class=\"token keyword\">var</span> encName <span class=\"token operator\">=</span> <span class=\"token string\">'([A-Za-z][A-Za-z0-9._-]*)'</span><span class=\"token punctuation\">;</span>\n                               <span class=\"token keyword\">var</span> pattern <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'^&lt;\\\\?xml\\\\s+.*encoding\\\\s*=\\\\s*([\\'\"])'</span><span class=\"token operator\">+</span>encName<span class=\"token operator\">+</span><span class=\"token string\">'\\\\1.*\\\\?&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Check document if not?</span>\n                               <span class=\"token comment\">// Let the request be processed below</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>encoding <span class=\"token operator\">===</span> <span class=\"token string\">''</span> <span class=\"token operator\">||</span> encoding <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Encoding has no effect on XML</span>\n                                    encoding <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                request<span class=\"token punctuation\">.</span><span class=\"token function\">overrideMimeType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text/plain; charset='</span><span class=\"token operator\">+</span>encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'x-user-defined'</span>\n                            <span class=\"token punctuation\">}</span>\n                            responseType <span class=\"token operator\">=</span> <span class=\"token string\">'responseText'</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">case</span> <span class=\"token keyword\">null</span><span class=\"token operator\">:</span>\n                        <span class=\"token keyword\">case</span> <span class=\"token string\">'xml'</span><span class=\"token operator\">:</span>\n                            responseType <span class=\"token operator\">=</span> <span class=\"token string\">'responseXML'</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'XInclude element contains an invalid \"parse\" attribute value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    request<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">||</span> request<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> request<span class=\"token punctuation\">[</span>responseType<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        response <span class=\"token operator\">=</span> request<span class=\"token punctuation\">[</span>responseType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>responseType <span class=\"token operator\">===</span> <span class=\"token string\">'responseXML'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\">// apply xpointer (only xpath1() subset is supported)</span>\n                            <span class=\"token keyword\">var</span> responseNodes<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xpointer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">var</span> xpathResult <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>\n                                                                 xpointer<span class=\"token punctuation\">,</span>\n                                                                 response<span class=\"token punctuation\">,</span>\n                                                                 <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                                                                 XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ORDERED_NODE_SNAPSHOT_TYPE</span><span class=\"token punctuation\">,</span>\n                                                                 <span class=\"token keyword\">null</span>\n                                                              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> xpathResult<span class=\"token punctuation\">.</span>snapshotLength<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xpathResult<span class=\"token punctuation\">.</span><span class=\"token function\">snapshotItem</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                responseNodes <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Otherwise, the response must be a single well-formed document response</span>\n                                responseNodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>response<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Put in array so can be treated the same way as the above</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token comment\">// PREPEND ANY NODE(S) (AS XML) THEN REMOVE XINCLUDE</span>\n                            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> responseNodes<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                xincludeParent<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>responseNodes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> xinclude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            xincludeParent<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>xinclude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                         <span class=\"token punctuation\">}</span>\n                         <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>responseType <span class=\"token operator\">===</span> <span class=\"token string\">'responseText'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>encName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                  <span class=\"token keyword\">var</span> encodingType <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>encodingType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                      encodingType <span class=\"token operator\">=</span> encodingType<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                                  <span class=\"token punctuation\">}</span>\n                                  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                                      encodingType <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">;</span>\n                                  <span class=\"token punctuation\">}</span>\n                                  <span class=\"token comment\">// Need to make a whole new request apparently since cannot convert the encoding after receiving it (to know what the encoding was)</span>\n                                  <span class=\"token keyword\">var</span> request2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                  request2<span class=\"token punctuation\">.</span><span class=\"token function\">overrideMimeType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text/plain; charset='</span><span class=\"token operator\">+</span>encodingType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                  request2<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> href<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                  request2<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'If-Modified-Since'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Thu, 1 Jan 1970 00:00:00 GMT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                  request2<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'no-cache'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                  request2<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                  response <span class=\"token operator\">=</span> request2<span class=\"token punctuation\">[</span>responseType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Update the response for processing</span>\n                             <span class=\"token punctuation\">}</span>\n\n                             <span class=\"token comment\">// REPLACE XINCLUDE WITH THE RESPONSE AS TEXT</span>\n                             <span class=\"token keyword\">var</span> textNode <span class=\"token operator\">=</span> docu<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                             xincludeParent<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span>textNode<span class=\"token punctuation\">,</span> xinclude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                         <span class=\"token punctuation\">}</span>\n\n                        <span class=\"token comment\">// replace xinclude in doc with response now (as plain text or XML)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Use xi:fallback if XInclude retrieval above failed</span>\n                <span class=\"token keyword\">var</span> xiFallbackChildren <span class=\"token operator\">=</span> xiFallback<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// PREPEND ANY NODE(S) THEN REMOVE XINCLUDE</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> xiFallbackChildren<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    xincludeParent<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>xiFallbackChildren<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> xinclude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                xincludeParent<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>xinclude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> docu<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}}],"toc":[],"summary":"XML Inclusions (XInclude) is a W3C Recommendation to allow inclusion of XML more different sources in a more convenient fashion than XML external entities. When used in conjunction with XPointer (Firefox supports a subset of it, and is used in the code sample below), XInclude can also target just specific portions of a document for inclusion. Firefox does not support it natively, but the following function aims to allow its use with documents passed into it.","popularity":0,"modified":"2022-01-05T16:00:58.000Z","other_translations":[{"title":"XInclude","locale":"fr","native":"Français"}],"source":{"folder":"en-us/glossary/xinclude","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/glossary/xinclude/index.md","last_commit_url":"https://github.com/mdn/content/commit/a1b01c6558f111f62118e73c60b9e2b95e423a13","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Glossary","title":"MDN Web Docs Glossary: Definitions of Web-related terms"},{"uri":"/en-US/docs/Glossary/XInclude","title":"XInclude"}],"pageTitle":"XInclude - MDN Web Docs Glossary: Definitions of Web-related terms | MDN","noIndexing":false}}