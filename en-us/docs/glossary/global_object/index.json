{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Global object","mdn_url":"/en-US/docs/Glossary/Global_object","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>A global object is an <a href=\"/en-US/docs/Glossary/Object\">object</a> that always exists in the <a href=\"/en-US/docs/Glossary/Global_scope\">global scope</a>.</p>\n<p>In JavaScript, there's always a global object defined. In a web browser, when scripts create global variables defined with the <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a> keyword, they're created as members of the global object. (In <a href=\"/en-US/docs/Glossary/Node.js\">Node.js</a> this is not the case.) The global object's <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\">interface</a> depends on the execution context in which the script is running. For example:</p>\n<ul>\n  <li>In a web browser, any code which the script doesn't specifically start up as a background task has a <a href=\"/en-US/docs/Web/API/Window\"><code>Window</code></a> as its global object. This is the vast majority of JavaScript code on the Web.</li>\n  <li>Code running in a <a href=\"/en-US/docs/Web/API/Worker\"><code>Worker</code></a> has a <a href=\"/en-US/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a> object as its global object.</li>\n  <li>Scripts running under <a href=\"/en-US/docs/Glossary/Node.js\">Node.js</a> have an object called <a href=\"https://nodejs.org/api/globals.html#globals_global\" class=\"external\" rel=\" noopener\"><code>global</code></a> as their global object.</li>\n</ul>\n<blockquote>\n  <p><strong>Note</strong>: Unlike <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a>, the statements <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a> do not create properties of the global object.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"window_object_in_the_browser","title":"<code>window</code> object in the Browser","isH3":false,"content":"<p>The <code>window</code> object is the Global Object in the Browser. Any Global Variables or Functions can be accessed as <em>properties</em> of the <code>window</code> object.</p>","titleAsText":"window object in the Browser"}},{"type":"prose","value":{"id":"access_global_variables","title":"Access Global Variables","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">===</span> window<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns: true</span>\n</code></pre></div>\n<p>After defining a Global Variable <code>foo</code>, we can access its value directly from the <code>window</code> object, by using the variable name <code>foo</code> as a property name of the Global Object <code>window.foo</code>.</p>\n<h4 id=\"explanation\">Explanation:</h4>\n<p>The global variable <code>foo</code> was stored in the <code>window</code> object, like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foobar\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"access_global_functions","title":"Access Global Functions","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// It is the same as the normal invoking: greeting();</span>\n</code></pre></div>\n<p>The example above explains how Global Functions are stored as <em>properties</em> in the <code>window</code> object. We created a Global Function called <code>greeting</code>, then invoked it using the <code>window</code> object.</p>\n<h4 id=\"explanation_2\">Explanation:</h4>\n<p>The global function <code>greeting</code> was stored in the <code>window</code> object, like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function-variable function\">greeting</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Glossary\">MDN Web Docs Glossary</a>\n    <ul>\n      <li><a href=\"/en-US/docs/Glossary/Global_scope\">global scope</a></li>\n      <li><a href=\"/en-US/docs/Glossary/Object\">object</a></li>\n    </ul>\n  </li>\n  <li><a href=\"/en-US/docs/Web/API/Window\"><code>Window</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a></li>\n  <li><a href=\"https://nodejs.org/api/globals.html#globals_global\" class=\"external\" rel=\" noopener\"><code>global</code></a></li>\n</ul>"}}],"toc":[{"text":"<code>window</code> object in the Browser","id":"window_object_in_the_browser"},{"text":"See also","id":"see_also"}],"summary":"A global object is an object that always exists in the global scope.","popularity":0.0057,"modified":"2022-02-18T09:06:52.000Z","other_translations":[{"title":"Objet global","locale":"fr","native":"Français"},{"title":"Global object (グローバルオブジェクト)","locale":"ja","native":"日本語"},{"title":"전역 객체","locale":"ko","native":"한국어"},{"title":"Global object","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Global object","locale":"ru","native":"Русский"},{"title":"全局对象","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/glossary/global_object","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/glossary/global_object/index.md","last_commit_url":"https://github.com/mdn/content/commit/d2a9f2e26a8139d4bb270d7dc3cddd8b848719fe","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Glossary","title":"MDN Web Docs Glossary: Definitions of Web-related terms"},{"uri":"/en-US/docs/Glossary/Global_object","title":"Global object"}],"pageTitle":"Global object - MDN Web Docs Glossary: Definitions of Web-related terms | MDN","noIndexing":false}}