{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Symbol","mdn_url":"/en-US/docs/Glossary/Symbol","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>In <a href=\"/en-US/docs/Glossary/JavaScript\">JavaScript</a>, Symbol is a <a href=\"/en-US/docs/Glossary/Primitive\">primitive value</a>.</p>\n<p>A value having the data type <strong>Symbol</strong> can be referred to as a \"Symbol value\". In a JavaScript runtime environment, a symbol value is created by invoking the function <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>, which dynamically produces an anonymous, unique value. A symbol may be used as an object property.</p>\n<p>Symbol can have an optional description, but for debugging purposes only.</p>\n<p>A <strong>Symbol</strong> value represents a unique identifier. For example:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Here are two symbols with the same description:</span>\n<span class=\"token keyword\">let</span> Sym1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sym\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> Sym2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sym\"</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Sym1 <span class=\"token operator\">===</span> Sym2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns \"false\"</span>\n<span class=\"token comment\">// Symbols are guaranteed to be unique.</span>\n<span class=\"token comment\">// Even if we create many symbols with the same description,</span>\n<span class=\"token comment\">// they are different values.</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> If you are familiar with Ruby (or another language) that also has a feature called <em>\"symbols\"</em>, please don't be misled. JavaScript symbols are different.</p>\n</div>\n<p><em>Symbol</em> type is a new feature in ECMAScript 2015. There is no ECMAScript 5 equivalent for Symbol.</p>\n<p>In some programming languages, the symbol data type is referred to as an \"atom.\"</p>"}},{"type":"prose","value":{"id":"symbols_dont_auto-convert_to_strings","title":"Symbols don't \"Auto-Convert\" to strings","isH3":true,"content":"<p>Most values in JavaScript support implicit conversion to a string. For instance, we can <code>alert</code> almost any value, and it will work. Symbols are special. They don't auto-convert.</p>\n<p>For example:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> Sym <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sym\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// TypeError: Cannot convert a Symbol value to a string</span>\n</code></pre></div>\n<p>That's a \"language guard\" against messing up, because strings and symbols are fundamentally different, and should not occasionally convert one into another.</p>\n<p>If you really want to show a symbol, we need to call <code>.toString()</code> on it.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> Sym <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sym\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Sym<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Symbol(Sym), now it works</span>\n</code></pre></div>\n<p>Or you can use the <code>symbol.description</code> property to get its description:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> _Sym <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sym\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>_Sym<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Sym</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"well-known_symbols","title":"Well-known symbols","isH3":true,"content":"<p>The <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> class has constants for so-called <em>well-known symbols</em>. These symbols let you configure how JS treats an object, by using them as property keys.</p>\n<p>Examples of well-known symbols are: <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator\"><code>Symbol.iterator</code></a> for array-like objects, or <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search\"><code>Symbol.search</code></a> for string objects.</p>\n<p>They are listed in the specification in the <a href=\"https://tc39.github.io/ecma262/#sec-well-known-symbols\" class=\"external\" rel=\" noopener\">Well-known symbols</a> table:</p>\n<ul>\n  <li><code>Symbol.hasInstance</code></li>\n  <li><code>Symbol.isConcatSpreadable</code></li>\n  <li><code>Symbol.iterator</code></li>\n  <li><code>Symbol.toPrimitive</code></li>\n  <li>…and so on.</li>\n</ul>"}},{"type":"prose","value":{"id":"global_symbol_registry","title":"Global symbol registry","isH3":true,"content":"<p>There is a global symbol registry holding all available symbols. The methods that access the registry are <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for\"><code>Symbol.for()</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor\"><code>Symbol.keyFor()</code></a>; these mediate between the global symbol table (or \"registry\") and the run-time environment. The global symbol registry is mostly built by JavaScript's compiler infrastructure, and the global symbol registry's content is not available to JavaScript's run-time infrastructure, except through these reflective methods.</p>\n<p>The method <code>Symbol.for(tokenString)</code> returns a symbol value from the registry, and <code>Symbol.keyFor(symbolValue)</code> returns a token string from the registry; each is the other's inverse, so the following is <code>true</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">keyFor</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tokenString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"tokenString\"</span> <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a title=\"Symbol (programming)\" href=\"https://en.wikipedia.org/wiki/Symbol_(programming)\" class=\"external\" rel=\" noopener\">Symbol (programming)</a> on Wikipedia</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Data_structures\">JavaScript data types and data structures</a></li>\n  <li><a href=\"https://2ality.com/2014/12/es6-symbols.html\" class=\"external\" rel=\" noopener\">Symbols in ECMAScript 6</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> in the MDN JS reference</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a></li>\n  <li><a href=\"/en-US/docs/Glossary\">MDN Web Docs Glossary</a>\n    <ul>\n      <li><a href=\"/en-US/docs/Glossary/JavaScript\">JavaScript</a></li>\n      <li><a href=\"/en-US/docs/Glossary/Primitive\">Primitive</a></li>\n    </ul>\n  </li>\n</ul>"}}],"toc":[{"text":"See also","id":"see_also"}],"summary":"In JavaScript, Symbol is a primitive value.","popularity":0.0037,"modified":"2022-02-18T09:33:58.000Z","other_translations":[{"title":"Symbol","locale":"de","native":"Deutsch"},{"title":"Symbol","locale":"es","native":"Español"},{"title":"Symbole","locale":"fr","native":"Français"},{"title":"Symbol","locale":"ja","native":"日本語"},{"title":"Symbol","locale":"ko","native":"한국어"},{"title":"Symbol","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Symbol (Символ)","locale":"ru","native":"Русский"},{"title":"Symbol","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"en-us/glossary/symbol","github_url":"https://github.com/mdn/content/blob/style/old/files/en-us/glossary/symbol/index.md","last_commit_url":"https://github.com/mdn/content/commit/0160aac0e623dacdce4019205f32f7b3d3e58019","filename":"index.md"},"parents":[{"uri":"/en-US/docs/Glossary","title":"MDN Web Docs Glossary: Definitions of Web-related terms"},{"uri":"/en-US/docs/Glossary/Symbol","title":"Symbol"}],"pageTitle":"Symbol - MDN Web Docs Glossary: Definitions of Web-related terms | MDN","noIndexing":false}}